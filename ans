def is_ref(matrix):
    row = len(matrix)
    col = len(matrix[0])
    leading_zeros = []
    for i in range(row):
        leading_zero_count = 0
        for j in range(col):
            if matrix[i][j] != 0:
                break
        leading_zero_count += 1
        leading_zeros.append(leading_zero_count)
    for i in range(row - 1):
        if leading_zeros[i] > leading_zeros[i + 1]:
            return False
        return True
def is_rref(matrix):
    row = len(matrix)
    col = len(matrix[0])
    if not is_ref(matrix):
        return False
    for i in range(row):
        leading_one_found = False
        for j in range(col):
            if matrix[i][j] == 1:
                leading_one_found = True
            elif matrix[i][j] != 0:
                return False
        if leading_one_found == False:
            return False
    return True
def print_matrix(matrix):
    for row in matrix:
        print(row)


m=int(input("enter m "))
n=int(input("enter n "))
arr=[]
for i in range(m):
    a1=[]
    for j in range(n):
        a=int(input("enter "))
        a1.append(a)
    arr.append(a1)
print(print_matrix(arr))
print("REF",is_ref(arr))
print("RREF",is_rref(arr))


-----------------------------------------------------------
import numpy as np
from sympy import *
sym_list=[]
vars=int(input("Enter the number of variables:"))
if vars==2:
  l,x,y=symbols('l x y')
  sym_list.append("x")
  sym_list.append("y")
elif vars==3:
  l,x,y,z=symbols('l x y z')
  sym_list.append("x")
  sym_list.append("y")
  sym_list.append("z")

if(vars==2):
    coeff_x2 = int(input("Enter the coefficient of x^2: "))
    coeff_xy = int(input("Enter the coefficient of xy: "))
    coeff_y2 = int(input("Enter the coefficient of y^2: "))
    coefficient_matrix = Matrix([[coeff_x2, Rational(coeff_xy, 2)], [Rational(coeff_xy, 2), coeff_y2]])
    print(coefficient_matrix)

if(vars==3):
    coeff_x2 = int(input("Enter the coefficient of x^2: "))
    coeff_xy = int(input("Enter the coefficient of xy: "))
    coeff_y2 = int(input("Enter the coefficient of y^2: "))
    coeff_xz = int(input("Enter the coefficient of xz: "))
    coeff_yz = int(input("Enter the coefficient of yz: "))
    coeff_z2 = int(input("Enter the coefficient of z^2: "))
    coefficient_matrix = Matrix([[coeff_x2, Rational(coeff_xy, 2), Rational(coeff_xz, 2)],
                                 [Rational(coeff_xy, 2), coeff_y2, Rational(coeff_yz, 2)],
                                 [Rational(coeff_xz, 2), Rational(coeff_yz, 2), coeff_z2]])
    print(coefficient_matrix)
eg_value=[]
X=[]
Z=[]

if vars==2:
    row_vector = [x,y]
    X1 = np.array(row_vector).reshape(1, -1)
    column_vector = [x,y]
    X2 = np.array(column_vector).reshape(-1, 1)
    Z=Matrix([0,0])
if vars==3:
    row_vector = [x,y,z]
    X1 = np.array(row_vector).reshape(1, -1)
    column_vector = [x,y,z]
    X2 = np.array(column_vector).reshape(-1, 1)
    Z=Matrix([0,0,0])
identity_matrix = np.eye(vars)
mat1=Matrix(coefficient_matrix - l*identity_matrix)
eq1 = Eq(mat1.det(),0)
eg_value.extend(solve(eq1,l))
diagnol_matrix=np.diag(eg_value)
first=X1*diagnol_matrix
can_form=first*X2
print("Canonical form:")
for i in range(vars):
  if(i==vars-1):
    print(can_form[i][i])
  else:
    print("{0} + ".format(can_form[i][i]) , end=' ')
