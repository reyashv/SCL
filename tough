import matplotlib.pyplot as plt
import numpy as np

def divided_difference(x, fx):
    n = len(x)
    table = [[0] * n for i in range(n)]

    for i in range(n):
        table[i][0] = fx[i]

    for j in range(1, n):
        for i in range(n - j):
            table[i][j] = (table[i + 1][j - 1] - table[i][j - 1]) / (x[i + j] - x[i])

    return table

def interpolate(x, fx, target_x):
    n = len(x)
    result = 0
    table = divided_difference(x, fx)

    for i in range(n):
        term = table[0][i]
        for j in range(i):
            term *= (target_x - x[j])
        result += term

    return result

x1 = [654, 658, 659, 661]
fx1 = [2.8156, 2.8182, 2.8189, 2.8202]

x2 = [0, 0.1, 0.2, 0.3, 0.4]
fx2 = [1, 1.1052, 1.2214, 1.3499, 1.4918]

target_x1 = 656
result1 = interpolate(x1, fx1, target_x1)
print(f"f({target_x1}) = {result1:.4f}")

target_x2 = 0.38
result2 = interpolate(x2, fx2, target_x2)
print(f"e({target_x2}) = {result2:.4f}")

table1 = divided_difference(x1, fx1)
table2 = divided_difference(x2, fx2)
print("\nDivided Difference Table (a):")
for row in table1:
    print(row)
print("\nDivided Difference Table (b):")
for row in table2:
    print(row)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.scatter(x1, fx1, label='Data Points (a)')
x_values1 = np.linspace(min(x1), max(x1), 100)
y_values1 = [interpolate(x1, fx1, x) for x in x_values1]
plt.plot(x_values1, y_values1, label='Interpolated Polynomial (a)')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Interpolation for Data Points (a)')
plt.legend()

plt.subplot(1, 2, 2)
plt.scatter(x2, fx2, label='Data Points (b)')
x_values2 = np.linspace(min(x2), max(x2), 100)
y_values2 = [interpolate(x2, fx2, x) for x in x_values2]
plt.plot(x_values2, y_values2, label='Interpolated Polynomial (b)')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Interpolation for Data Points (b)')
plt.legend()

plt.tight_layout()
plt.show()





import numpy as np
from sympy import*
from math import *
import matplotlib.pyplot as plt
import sympy as sp

n = int(input("Enter the number of data points : "))
x_pts = list(map(int,(input("Enter the x values seperated by a white space  : ").split())))
y_pts = list(map(int,(input("Enter the f(x) values sepearated by a white space : ").split())))

m=[]
for i in range(n):
  m.append(Symbol(f'm_{i}'))
print(m)

equations=[]

for i in range(1,n-1):
  eq = Eq((m[i-1]+(4*m[i])+m[i+1]),6*(y_pts[i-1]-(2*y_pts[i])+y_pts[i+1]))
  equations.append(eq)

substituitions = {m[0]: 0 ,m[n-1]: 0}
equations_with_subs = [eq.subs(substituitions) for eq in equations]

m_final=[]
rem_m=[]
for i in range (0,n):
  if(i==0 or i == n-1) : 
    m_final.append(0)
  else:
    m_final.append(m[i])
    rem_m.append(m[i])

for eq in equations_with_subs:
  print(eq)

solution = sp.solve(equations_with_subs,rem_m)
print(solution)

x=Symbol('x')
f_x = []


for i in range(0,n-1):
  print(i)
  y = (1/6)*((x_pts[i+1] - x)**3)*m_final[i] + (1/6)*((x - x_pts[i])**3)*m_final[i+1] + (x_pts[i+1] - x)*(y_pts[i] - (1/6)*m_final[i]) + (x - x_pts[i])*(y_pts[i+1]-(1/6)*m_final[i+1])
  f_x.append(y)

res_f=[]

for f in f_x:
  for i in range(1,n-1):
    f=f.subs(sp.Symbol(f'm_{i}'),solution[sp.Symbol(f'm_{i}')])
  res_f.append(simplify(f))
  print(simplify(f))

inp=float(input("Enter the interpolated value :"))
c_inp = ceil(inp)
res = res_f[int(c_inp) -1].subs(x,inp)
print("Result : ",res)

x_vals_all=[]
y_vals_all=[]

for i in range(n-1):
  x_vals=[]
  y_vals=[]
  x1 = x_pts[i+0]
  x2 = x_pts[i+1]
  x_vals.extend(np.linspace(x1,x2,50))
  for val in x_vals:
    y_vals.append(res_f[i].subs(x,val))
  x_vals_all.extend(x_vals)
  y_vals_all.extend(y_vals)

fig , ax =plt.subplots()

x_pts.append(inp)
y_pts.append(res)

ax.scatter(x_pts,y_pts,color='red',label='datapoints')
ax.plot(x_vals_all,y_vals_all,label="inerpolation")
plt.legend()
plt.show()


