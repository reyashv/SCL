import numpy as np

def f(x, y):
    return (2 * x * y) / (1 + x**2)

x0 = 0.0
y0 = 0.0
h = 0.1
x_target = 0.4
num_steps = int((x_target - x0) / h)

x_values = [x0]
y_values = [y0]

for _ in range(num_steps):
    y0 = y0 + h * f(x0, y0)
    x0 += h
    x_values.append(x0)
    y_values.append(y0)

for x in [0.1, 0.2, 0.3]:
    index = int(x / h)
    print(f"y({x:.1f}) using Euler's method: {y_values[index]:.4f}")

def milne_predictor_corrector(x_values, y_values, h):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (4 * h / 3) * (
        2 * f(x_values[n - 1], y_values[n - 1]) -
        f(x_values[n - 2], y_values[n - 2]) +
        2 * f(x_values[n - 3], y_values[n - 3])
    )
    return y_predicted

def adams_bashforth(x_values, y_values, h):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (h / 24) * (
        55 * f(x_values[n - 1], y_values[n - 1]) -
        59 * f(x_values[n - 2], y_values[n - 2]) +
        37 * f(x_values[n - 3], y_values[n - 3]) -
        9 * f(x_values[n - 4], y_values[n - 4])
    )

y_milne_predictor_corrector = milne_predictor_corrector(x_values, y_values, h)
y_adams_bashforth = adams_bashforth(x_values, y_values, h)

print(f"y(0.4) by Milne's Predictor-Corrector: {y_milne_predictor_corrector:.4f}")
print(f"y(0.4) by Adams-Bashforth: {y_adams_bashforth:.4f}")







import numpy as np

def f(x, y):
    return (2 - y**2) / (5 * x)

x0 = 4.0
y0 = 1.0
h = 0.1
x_target = 4.4
num_steps = int((x_target - x0) / h)

x_values = [x0]
y_values = [y0]

for _ in range(num_steps):
    k1 = h * f(x0, y0)
    k2 = h * f(x0 + h, y0 + k1)
    y0 = y0 + (k1 + k2) / 2
    x0 += h
    x_values.append(x0)
    y_values.append(y0)

for x in [4.1, 4.2, 4.3, 4.4]:
    index = int((x - x_values[0]) / h)
    if index >= 0:
        print(f"y({x:.1f}) using Modified Euler's method: {y_values[index]:.4f}")

def milne_predictor_corrector(x_values, y_values, h):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (4 * h / 3) * (
        2 * f(x_values[n - 1], y_values[n - 1]) -
        f(x_values[n - 2], y_values[n - 2]) +
        2 * f(x_values[n - 3], y_values[n - 3])
    )
    return y_predicted

def adams_bashforth(x_values, y_values, h):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (h / 24) * (
        55 * f(x_values[n - 1], y_values[n - 1]) -
        59 * f(x_values[n - 2], y_values[n - 2]) +
        37 * f(x_values[n - 3], y_values[n - 3]) -
        9 * f(x_values[n - 4], y_values[n - 4])
    )
    return y_predicted

y_milne_predictor_corrector = milne_predictor_corrector(x_values, y_values, h)
y_adams_bashforth = adams_bashforth(x_values, y_values, h)

print(f"y(4.4) by Milne's Predictor-Corrector: {y_milne_predictor_corrector:.4f}")
print(f"y(4.4) by Adams-Bashforth: {y_adams_bashforth:.4f}")
