import math
def f(x, y):
    return x - y + math.cos(x + y)

x0 = 0.1
y0 = 1
h = 0.01
x_target = 1.7
num_steps = int((x_target - x0) / h)

for i in range(num_steps):
    y0 += h * f(x0, y0)
    x0 += h
    
result = y0
print(f"Approximate solution at x = {x_target}: y = {result:.4f}")



import numpy as np
def f(x, y):
    return x**2 - y + 2*x + 4*y

x0 = 0.3
y0 = -0.18
h = 0.01
x_target = 2.5
num_steps = int((x_target - x0) / h)

for i in range(num_steps):
    k1 = h * f(x0, y0)
    k2 = h * f(x0 + h, y0 + k1)
    y0 += 0.5 * (k1 + k2)
    x0 += h

result = y0
print(f"Approximate solution at x = {x_target}: y = {result:.4f}")





import numpy as np

def f(x, y):
    return (x * y) / (x**2 + y**2) - x * y

x0 = 0
y0 = 10
h = 0.01
x_target = 3
num_steps = int((x_target - x0) / h)

for i in range(num_steps):
    k1 = h * f(x0, y0)
    k2 = h * f(x0 + 0.5 * h, y0 + 0.5 * k1)
    k3 = h * f(x0 + h, y0 - k1 + 2 * k2)
    y0 += (k1 + 4 * k2 + k3) / 6
    x0 = x0 + h

result = y0
print(f"Approximate solution at x = {x_target}: y = {result:.4f}")




import numpy as np

def f(x, y):
    return x * y + x - y**3

x0 = 1
y0 = -4
h = 0.01
x_target = 2.5
num_steps = int((x_target - x0) / h)

for i in range(num_steps):
    k1 = h * f(x0, y0)
    k2 = h * f(x0 + 0.5 * h, y0 + 0.5 * k1)
    k3 = h * f(x0 + 0.5 * h, y0 + 0.5 * k2)
    k4 = h * f(x0 + h, y0 + k3)
    y0 += (k1 + 2 * k2 + 2 * k3 + k4) / 6
    x0 += h

result = y0
print(f"Approximate solution at x = {x_target}: y = {result:.4f}")
