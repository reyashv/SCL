import numpy as np
import sys
import math

def guass_Jacobi(a,x,b):
    D=np.diag(a)
    r=a-np.diagflat(D)
    for i in range(n):
        x=(b-np.dot(r,x))/D
    return x
n=int(input("Enter the no. of equations:"))
m=int(input("Enter the no. of unknowns:"))
if n==m:
    eq=[]
    c=[]
    for i in range(n):
        a=int(input("enter coeff 1"))
        eq.append(a)
        b=int(input("enter coeff 2"))
        eq.append(b)
        d=int(input("enter constant"))
        c.append(d)    
else:
    print("Not a square matrix")
    sys.exit(0)

l=np.array(eq)
matrix=l.reshape(n,m)
print(matrix)
count=0
for i in range(0, n-1) :		
	sum = 0
	for j in range(0, n) :
		sum = sum + abs(matrix[i,j])	
	sum = sum - abs(matrix[i,i])
	if (abs(matrix[i,i]) < sum) :
            matrix[[i,j]]=matrix[[j,i]]
            i=i-1
            count+=1
print(count)
if(count >=math.factorial(n-1)):
    print("Not diagonally dominant")
    sys.exit(0)
else :
    print("Diagonally dominant")
    print(matrix)        

x=np.ones(n)
for i in range(10):
    y=guass_Jacobi(matrix,x,c)
    print(y)

----------------------------------------

import numpy as np
import sys
import math

def gauss_seidel(a, x, c, n):
    for i in range(n):
        d = c[i]
        for j in range(n):
            if i != j:
                d -= a[i,j] * x[j]
        x[i] = d / a[i,i]
    return x

n = int(input("Enter the number of equations: "))
m = int(input("Enter the number of unknowns: "))
if n != m:
    print("Not a square matrix")
    sys.exit(0)

eq = []
c = []
for i in range(n):
    for j in range(m):
        a = int(input("Enter coefficients for eq{0} variable{1}: ".format(i+1, j+1)))
        eq.append(a)
    b = int(input("Enter the constants for eq{0}: ".format(i+1)))
    c.append(b)

l = np.array(eq)
matrix = l.reshape(n, m)
print(matrix)


count = 0
for i in range(n):
    sum = 0
    for j in range(n):
        sum += abs(matrix[i,j])
    sum -= abs(matrix[i,i])
    if abs(matrix[i,i]) < sum:
        k = np.argmax(np.abs(matrix[i:,i])) + i
        matrix[[i,k]] = matrix[[k,i]]
        count += 1
if count >= math.factorial(n-1):
    print("Not diagonally dominant")
    sys.exit(0)
else:
    print("Diagonally dominant")
    print(matrix)


x = np.zeros(n)
for i in range(10):
    x = gauss_seidel(matrix, x, c, n)
    print(x)


-------------------------------------------

import numpy as np
def normalize(x):
    fac = abs(x).max()
    x1 = x / x.max()
    return fac, x1

arr=[]
n=int(input("enter order"))
for i in range(n*n):
    g=int(input("enter element "))
    arr.append(g)
a1=np.array(arr)
a=a1.reshape(n,n)
print(a)
x = []
for i in range(n):
    x.append(1)
x=np.array(x)
print(x)

def invert_matrix(matrix):
    n = len(matrix)    
    augmatrix = np.hstack((matrix, np.identity(n)))
    for i in range(n):
        scale_factor = augmatrix[i][i]
        augmatrix[i] /= scale_factor
        for j in range(n):
            if j != i:
                factor = augmatrix[j][i]
                augmatrix[j] -= factor * augmatrix[i]    
    inverse_matrix = augmatrix[:, n:]
    return inverse_matrix

c=invert_matrix(a)
for i in range(8):
    x = np.dot(c, x)
    lambda1, x = normalize(x)
    
print('Eigenvalue:', lambda1)
print('Eigenvector:', x)

----------------------------------------------
import numpy as np
def diagonalize(matrix):
    eigenvalues, eigenvectors = np.linalg.eig(matrix)    
    diagonal_matrix = np.diag(eigenvalues)    
    eigenvectors_inv = np.linalg.inv(eigenvectors)    
    P = eigenvectors    
    diagonalized_matrix = np.dot(eigenvectors_inv, np.dot(matrix, P))
    return diagonal_matrix, P, diagonalized_matrix

n = int(input("Enter the size of the square matrix: "))
print("Enter the matrix elements row-wise:")
matrix = np.array([[float(input(f"Element [{i+1}][{j+1}]: ")) for j in range(n)] for i in range(n)])
diagonal_matrix, P, diagonalized_matrix = diagonalize(matrix)
print("\nDiagonal Matrix (D):")
print(diagonal_matrix)
print("\nMatrix P:")
print(P)
print("\nDiagonalized Matrix:")
print(diagonalized_matrix)

